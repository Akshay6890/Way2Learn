/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Akshay
 */
public class Frame9 extends javax.swing.JFrame {

    /**
     * Creates new form Frame9
     */
    public Frame9() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Unreal Engine ");
        setBounds(new java.awt.Rectangle(350, 190, 0, 0));
        setMinimumSize(new java.awt.Dimension(1180, 723));
        setName("Unreal Engine"); // NOI18N
        setResizable(false);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 24)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setTabSize(6);
        jTextArea1.setText("\n\n\tThe Unreal Engine is a source-available game engine developed by Epic Games, first showcased in the 1998 first-person shooter game Unreal. Although primarily developed for first-person shooters, it has been successfully used in a variety of other genres, including stealth, fighting games, MMORPGs, and other RPGs. With its code written in C++, the Unreal Engine features a high degree of portability and is a tool used by many game developers today. \n\n\tThe current release is Unreal Engine 4, designed for Microsoft Windows, macOS, Linux, SteamOS, HTML5, iOS, Android, Nintendo Switch, PlayStation 4, Xbox One, Magic Leap One, and virtual reality (SteamVR/HTC Vive, Oculus Rift, PlayStation VR, Google Daydream, OSVR and Samsung Gear VR).\n\n\n------History-----\n\n>>Unreal Engine 1\n\nDevelopment of the first generation Unreal Engine was carried out by the founder of Epic Games, Tim Sweeney. Inspired by \"John Carmack's pioneering programming work on Doom and Quake\",Sweeney started the engine in 1995 for the production of a game that would later become known as Unreal, a first-person shooter set in a medieval world with alien elements. After years in development, it debuted with the game's release in 1998, although licensees such as MicroProse and Legend Entertainment had possessed the technology much earlier, with the first licensing deal taking place in 1996.\n\n\tBoth software and hardware rendering were present in the foundational software, as well as collision detection, colored lighting, and a rudimentary version of texture filtering. The engine also provided a level editor, UnrealEd (formerly Unreal World Editor[10]), that had support for real-time constructive solid geometry operations as early as 1996, allowing mappers to change the level layout \"on the fly\". Other features implemented during the engine's development included real-time direct illumination and light sourcing, which were respectively integrated in 1995 and 1997. In addition to having support for Microsoft Windows, Linux and Mac,[16] Unreal Tournament also opened the platform to PlayStation 2 and, with the help of Secret Level, to Dreamcast. In 2000, Epic updated the engine with new improvements, including higher-polygon models and architecture, a skeletal animation system and large-scale terrain support.\n\n\tBy late 1999, The New York Times indicated that the number of external projects using Epic's technology was 16, naming the likes of Deus Ex, Nerf Arena Blast and Duke Nukem Forever,the title from 3D Realms that was set to debut the series on the GameCube console. While it cost around $3 million to produce and licenses for up to $350,000, Epic gave modders the ability to create their own worlds with the incorporation of UnrealEd and a scripting language called UnrealScript in its games, sparking a community of enthusiasts around a game engine that was built to be extensible and improved over multiple generations of games.\n\n>>Unreal Engine 2\n\n\tThe second version made its debut in 2002 with America's Army, a free multiplayer shooter developed by the U.S. Army as a recruitment tool. Though based on previous technology, this generation saw the renderer completely re-written, and the inclusion of a variety of features such as the Matinee cinematic editing tool, export plug-ins for 3D Studio Max and Maya, and the Karma physics engine, a tool by Math Engine that powered the ragdoll physics in Unreal Tournament 2003. In addition, it featured UnrealEd 2, which debuted with the previous generation of the engine and was shortly followed later by UnrealEd 3. Other engine elements were also updated, with improved assets as well as adding support for the Xbox. \n\n\tUE2.5, an update to the original version of UE2, improved rendering performance and added vehicles physics, a particle system editor for UnrealEd, and 64-bit support in Unreal Tournament 2004. A specialized version of UE2 called UE2X was used for Unreal Championship 2: The Liandri Conflict on the original Xbox platform, featuring optimizations specific to that console. \n\n\tIn March 2011, Ubisoft Montreal revealed that UE2 was successfully running on the Nintendo 3DS.\n\n>>Unreal Engine 3\n\n\tScreenshots of Unreal Engine 3 were presented in 2004, at which point the engine had already been in development for over 18 months. Unlike Unreal Engine 2, which still supported fixed-function pipeline, Unreal Engine 3 was designed to take advantage of fully programmable shader hardware. All lighting calculations were done per-pixel, instead of per-vertex. On the rendering side, Unreal Engine 3 provided support for a gamma-correct high-dynamic range renderer.\n\n\tInitially, Unreal Engine 3 only supported Windows, PlayStation 3, and Xbox 360 platforms, while iOS (first demonstrated with Epic Citadel) and Android were added later in 2010, with Infinity Blade being the first iOS title and Dungeon Defenders the first Android title. OS X support was added in 2011. The same year it was announced that the engine would support Adobe Flash Player 11 through the Stage 3D hardware-accelerated APIs and that it was being used in two Wii U games, Batman: Arkham City and Aliens: Colonial Marines. Windows 8 and Windows RT support was added in 2012. In 2013, Epic teamed-up with Mozilla to bring Unreal Engine 3 to HTML5. Using the asm.js sublanguage and Emscripten compiler, they were able to port the engine to JavaScript and WebGL in four days.\n\n\tThroughout the lifetime of UE3, significant updates have been incorporated, including improved destructible environments, soft body dynamics, large crowd simulation, iPod Touch functionality, Steamworks integration, a real-time global illumination solution, and stereoscopic 3D on Xbox 360 via TriOviz for Games Technology. DirectX 11 support was demonstrated with the Samaritan demo, which was unveiled at the 2011 Game Developers Conference and built by Epic Games in a close partnership with NVIDIA, with engineers working around the country to push real-time graphics to a new high point.\n\n---Unreal Development Kit---\n\t\n\tWhile Unreal Engine 3 has been quite open for modders to work with, the ability to publish and sell games made using UE3 was restricted to licensees of the engine. However, in November 2009, Epic released a free version of UE3's SDK, called the Unreal Development Kit (UDK), that is available to the general public.\n\n\tIn December 2010, it was updated to include support for creating iOS games and apps.\n\n>>Unreal Engine 4\n\n\tIn August 2005, Mark Rein, the vice-president of Epic Games, revealed that Unreal Engine 4 had been in development since 2003. Until 2008, development was \"basically\" done by Sweeney. The engine targets the eighth generation of consoles, PCs and Tegra K1-based devices running Android announced in January 2014 at CES. \n\n\tIn February 2012, Rein said \"people are going to be shocked later this year when they see Unreal Engine 4\". Unreal Engine 4 was unveiled to limited attendees at the 2012 Game Developers Conference, and video of the engine being demonstrated by technical artist Alan \"Talisman\" Willard was released to the public in June 7, 2012 via GameTrailers TV.\n\n\tOne of the major features planned for UE4 was real-time global illumination using voxel cone tracing, eliminating pre-computed lighting. However, this feature has been replaced with a similar but less computationally-expensive algorithm prior to release for all platforms including the PC due to performance concerns. UE4 also includes new developer features to reduce iteration time, and allows updating of C++ code while the engine is running. The new \"Blueprint\" visual scripting system (a successor to UE3's \"Kismet\") allows for rapid development of game logic without using C++, and includes live debugging. The result is reduced iteration time, and less of a divide between technical artists, designers, and programmers.\n\n");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("HOME");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Unreal Engine");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(329, 329, 329)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            
        Frame2 f=new Frame2();
        this.setVisible(false);
        f.setVisible(true);


        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame9.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame9.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame9.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame9.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame9().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
